name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'product-service/**'
      - 'order-service/**'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  APP_NAME_PREFIX: mother-nature

jobs:
  # Detect changed services
  detect-changed-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-output.outputs.services }}
    steps:
    - uses: actions/checkout@v4

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v42
      with:
        separator: ','
        files: |
          product-service/**
          order-service/**
          
    - name: Set services output
      id: set-output
      run: |
        SERVICES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | \
          grep -oE '(product-service|order-service)' | \
          sort | uniq | jq -R -s -c 'split("\n") | map(select(. != ""))')
        echo "services=${SERVICES}" >> $GITHUB_OUTPUT
          
  # Build
  build:
    needs: detect-changed-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changed-services.outputs.services) }}
    if: ${{ fromJSON(needs.detect-changed-services.outputs.services).length > 0 }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      working-directory: ${{ matrix.service }}
      run: chmod +x gradlew

    - name: Build with Gradle
      working-directory: ${{ matrix.service }}
      run: ./gradlew clean build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build&Push Docker image
      working-directory: ${{ matrix.service }}
      run: |
        SERVICE_NAME=${{ env.APP_NAME_PREFIX }}/${{ matrix.service }}
        docker build -t $SERVICE_NAME .
        docker tag $SERVICE_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$SERVICE_NAME:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/$SERVICE_NAME:latest
